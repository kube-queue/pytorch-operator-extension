// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kube-queue/api/pkg/apis/scheduling/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QueueUnitLister helps list QueueUnits.
// All objects returned here must be treated as read-only.
type QueueUnitLister interface {
	// List lists all QueueUnits in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QueueUnit, err error)
	// QueueUnits returns an object that can list and get QueueUnits.
	QueueUnits(namespace string) QueueUnitNamespaceLister
	QueueUnitListerExpansion
}

// queueUnitLister implements the QueueUnitLister interface.
type queueUnitLister struct {
	indexer cache.Indexer
}

// NewQueueUnitLister returns a new QueueUnitLister.
func NewQueueUnitLister(indexer cache.Indexer) QueueUnitLister {
	return &queueUnitLister{indexer: indexer}
}

// List lists all QueueUnits in the indexer.
func (s *queueUnitLister) List(selector labels.Selector) (ret []*v1alpha1.QueueUnit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QueueUnit))
	})
	return ret, err
}

// QueueUnits returns an object that can list and get QueueUnits.
func (s *queueUnitLister) QueueUnits(namespace string) QueueUnitNamespaceLister {
	return queueUnitNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QueueUnitNamespaceLister helps list and get QueueUnits.
// All objects returned here must be treated as read-only.
type QueueUnitNamespaceLister interface {
	// List lists all QueueUnits in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QueueUnit, err error)
	// Get retrieves the QueueUnit from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.QueueUnit, error)
	QueueUnitNamespaceListerExpansion
}

// queueUnitNamespaceLister implements the QueueUnitNamespaceLister
// interface.
type queueUnitNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QueueUnits in the indexer for a given namespace.
func (s queueUnitNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.QueueUnit, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QueueUnit))
	})
	return ret, err
}

// Get retrieves the QueueUnit from the indexer for a given namespace and name.
func (s queueUnitNamespaceLister) Get(name string) (*v1alpha1.QueueUnit, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("queueunit"), name)
	}
	return obj.(*v1alpha1.QueueUnit), nil
}
